# Generated by Django 4.2.4 on 2024-04-08 23:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnswernManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('profile_id', models.AutoField(primary_key=True, serialize=False)),
                ('avatar', models.ImageField(blank=True, default='static/img/default.jpg', null=True, upload_to='static/img/avatar')),
                ('rating', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            managers=[
                ('manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
            ],
            managers=[
                ('manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('text', models.CharField(max_length=2000)),
                ('grade', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('que_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='que_user', to='SO.profile')),
                ('tags', models.ManyToManyField(blank=True, related_name='questions', to='SO.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('answer_id', models.AutoField(primary_key=True, serialize=False)),
                ('ans_title', models.CharField(max_length=100)),
                ('ans_text', models.CharField(max_length=2000)),
                ('ans_grade', models.IntegerField(default=0)),
                ('is_correct', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ans_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question', to='SO.question')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='author', to='SO.question')),
            ],
        ),
        migrations.CreateModel(
            name='ReactionToQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like', models.CharField(choices=[('Like', 'like'), ('Dislike', 'dislike')], max_length=7)),
                ('answer_like', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='answer_like', to='SO.answer')),
                ('question_like', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='question_like', to='SO.question')),
                ('user_like', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_like', to='SO.question')),
            ],
            options={
                'unique_together': {('user_like', 'answer_like'), ('user_like', 'question_like')},
            },
        ),
    ]
